### Project Structure

```
authentication_system/
│
├── auth_strategies/
│   ├── __init__.py
│   ├── base_authenticator.py
│   ├── basic_authentication.py
│   ├── session_authentication.py
│   ├── jwt_authentication.py
│   ├── api_key_authentication.py
│
├── tests/
│   ├── __init__.py
│   ├── test_basic_authentication.py
│   ├── test_session_authentication.py
│   ├── test_jwt_authentication.py
│   ├── test_api_key_authentication.py
│
├── main.py
├── requirements.txt
└── README.md
```

### Dependencies

- `Flask` for handling HTTP requests
- `PyJWT` for JWT token handling
- `pytest` for unit testing

### Implementation

#### `auth_strategies/base_authenticator.py`

```python
class Authenticator:
    def authenticate(self, request):
        raise NotImplementedError("Authenticate method not implemented")
```

#### `auth_strategies/basic_authentication.py`

```python
import base64

class BasicAuthentication(Authenticator):
    def __init__(self, users):
        self.users = users

    def authenticate(self, request):
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return False
        auth_type, credentials = auth_header.split()
        if auth_type.lower() != 'basic':
            return False
        decoded_credentials = base64.b64decode(credentials).decode('utf-8')
        username, password = decoded_credentials.split(':')
        return self.users.get(username) == password
```

#### `auth_strategies/session_authentication.py`

```python
import uuid

class SessionAuthentication(Authenticator):
    def __init__(self):
        self.sessions = {}

    def authenticate(self, request):
        session_id = request.cookies.get('session_id')
        return session_id in self.sessions

    def login(self, username):
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = username
        return session_id
```

#### `auth_strategies/jwt_authentication.py`

```python
import jwt
import datetime

class JWTAuthentication(Authenticator):
    def __init__(self, secret):
        self.secret = secret

    def authenticate(self, request):
        token = request.headers.get('Authorization')
        if not token:
            return False
        try:
            payload = jwt.decode(token, self.secret, algorithms=['HS256'])
            return payload['exp'] > datetime.datetime.utcnow()
        except jwt.ExpiredSignatureError:
            return False
        except jwt.InvalidTokenError:
            return False

    def generate_token(self, username):
        payload = {
            'username': username,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)
        }
        return jwt.encode(payload, self.secret, algorithm='HS256')
```

#### `auth_strategies/api_key_authentication.py`

```python
class APIKeyAuthentication(Authenticator):
    def __init__(self, api_keys):
        self.api_keys = api_keys

    def authenticate(self, request):
        api_key = request.headers.get('Authorization') or request.args.get('api_key')
        return api_key in self.api_keys
```

#### [`main.py`](command:_github.copilot.openSymbolFromReferences?%5B%22main.py%22%2C%5B%7B%22uri%22%3A%7B%22%24mid%22%3A1%2C%22fsPath%22%3A%22d%3A%5C%5CsomethingIdroppedin%5C%5CSQA%5C%5CCan-AI-Be-a-Software-engineer%5C%5CPython%5C%5CGitHub-Copilot%5C%5CStrategy%5C%5Cround-3%5C%5Cprompt%5C%5Csrc-prompt-1.txt%22%2C%22_sep%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fd%253A%2FsomethingIdroppedin%2FSQA%2FCan-AI-Be-a-Software-engineer%2FPython%2FGitHub-Copilot%2FStrategy%2Fround-3%2Fprompt%2Fsrc-prompt-1.txt%22%2C%22path%22%3A%22%2FD%3A%2FsomethingIdroppedin%2FSQA%2FCan-AI-Be-a-Software-engineer%2FPython%2FGitHub-Copilot%2FStrategy%2Fround-3%2Fprompt%2Fsrc-prompt-1.txt%22%2C%22scheme%22%3A%22file%22%7D%2C%22pos%22%3A%7B%22line%22%3A32%2C%22character%22%3A83%7D%7D%5D%5D "Go to definition")

```python
from flask import Flask, request, jsonify
from auth_strategies.basic_authentication import BasicAuthentication
from auth_strategies.session_authentication import SessionAuthentication
from auth_strategies.jwt_authentication import JWTAuthentication
from auth_strategies.api_key_authentication import APIKeyAuthentication

app = Flask(__name__)

# Example users and API keys
users

 =

 {'user1': 'password1'}
api_keys = {'valid_api_key'}

# Initialize authentication strategies
basic_auth = BasicAuthentication(users)
session_auth = SessionAuthentication()
jwt_auth = JWTAuthentication('secret')
api_key_auth = APIKeyAuthentication(api_keys)

# Example route
@app.route('/protected')
def protected():
    if not basic_auth.authenticate(request):
        return jsonify({'message': 'Unauthorized'}), 401
    return jsonify({'message': 'Welcome!'})

if __name__ == '__main__':
    app.run(debug=True)
```

### Unit Tests

#### [`tests/test_basic_authentication.py`](command:_github.copilot.openSymbolFromReferences?%5B%22tests%2Ftest_basic_authentication.py%22%2C%5B%7B%22uri%22%3A%7B%22%24mid%22%3A1%2C%22fsPath%22%3A%22d%3A%5C%5CsomethingIdroppedin%5C%5CSQA%5C%5CCan-AI-Be-a-Software-engineer%5C%5CPython%5C%5CGitHub-Copilot%5C%5CStrategy%5C%5Cround-3%5C%5Cprompt%5C%5Csrc-prompt-1.txt%22%2C%22_sep%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fd%253A%2FsomethingIdroppedin%2FSQA%2FCan-AI-Be-a-Software-engineer%2FPython%2FGitHub-Copilot%2FStrategy%2Fround-3%2Fprompt%2Fsrc-prompt-1.txt%22%2C%22path%22%3A%22%2FD%3A%2FsomethingIdroppedin%2FSQA%2FCan-AI-Be-a-Software-engineer%2FPython%2FGitHub-Copilot%2FStrategy%2Fround-3%2Fprompt%2Fsrc-prompt-1.txt%22%2C%22scheme%22%3A%22file%22%7D%2C%22pos%22%3A%7B%22line%22%3A37%2C%22character%22%3A11%7D%7D%5D%5D "Go to definition")

```python
import pytest
from auth_strategies.basic_authentication import BasicAuthentication

def test_basic_authentication():
    users = {'user1': 'password1'}
    basic_auth = BasicAuthentication(users)
    request = type('Request', (object,), {'headers': {'Authorization': 'Basic dXNlcjE6cGFzc3dvcmQx'}})()
    assert basic_auth.authenticate(request) == True
```

### `requirements.txt`

```
Flask
PyJWT
pytest
```

### [`README.md`](command:_github.copilot.openRelativePath?%5B%7B%22scheme%22%3A%22file%22%2C%22authority%22%3A%22%22%2C%22path%22%3A%22%2FD%3A%2FsomethingIdroppedin%2FSQA%2FCan-AI-Be-a-Software-engineer%2FREADME.md%22%2C%22query%22%3A%22%22%2C%22fragment%22%3A%22%22%7D%5D "d:\somethingIdroppedin\SQA\Can-AI-Be-a-Software-engineer\README.md")

```markdown
# Authentication System

## Overview

This project implements a pluggable authentication system using the Strategy Design Pattern in Python. It supports multiple authentication mechanisms: Basic Authentication, Session-Based Authentication, JWT Authentication, and API Key Authentication.

## Directory Structure

- `auth_strategies/`: Contains the different authentication strategy implementations.
- `tests/`: Contains unit tests for each authentication strategy.
- `main.py`: Main application file.
- `requirements.txt`: Project dependencies.
- `README.md`: Project documentation.

## Dependencies

- Flask
- PyJWT
- pytest

## Running the Application

1. Install dependencies:
    ```sh
    pip install -r requirements.txt
    ```

2. Run the application:
    ```sh
    python main.py
    ```

3. Run the tests:
    ```sh
    pytest
    ```
```