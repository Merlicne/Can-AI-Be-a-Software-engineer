To achieve 100% statement coverage for the pluggable authentication system using the Strategy Design Pattern, we need to ensure that each line of code in our authentication strategies and main application is executed by our tests. Hereâ€™s how you can write comprehensive unit tests using `pytest` to cover all the authentication strategies provided.

### Test Suite Setup

First, make sure you have `pytest` installed:

```bash
pip install pytest
```

### Test Files

Let's create a set of tests for each authentication strategy and the main application.

#### 1. **Basic Authentication Tests**

**`tests/test_basic_auth.py`**

```python
import pytest
from flask import Flask, request
from flask.testing import FlaskClient
from auth.basic_auth import BasicAuth

@pytest.fixture
def app():
    app = Flask(__name__)
    app.config['TESTING'] = True
    return app

@pytest.fixture
def client(app):
    return app.test_client()

@pytest.fixture
def basic_auth():
    return BasicAuth()

def test_basic_auth_success(client, basic_auth):
    # Use a valid username and password encoded in base64
    auth_header = 'Basic ' + 'dXNlcjE6cGFzc3dvcmQx'  # Base64 encoding of 'user1:password1'
    response = client.get('/login', headers={'Authorization': auth_header})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_basic_auth_failure(client, basic_auth):
    # Use an invalid username and password encoded in base64
    auth_header = 'Basic ' + 'dXNlcjI6aW52YWxpZA=='  # Base64 encoding of 'user2:invalid'
    response = client.get('/login', headers={'Authorization': auth_header})
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"

def test_basic_auth_missing_header(client, basic_auth):
    response = client.get('/login')
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"
```

#### 2. **Session-Based Authentication Tests**

**`tests/test_session_auth.py`**

```python
import pytest
from flask import Flask, request, jsonify
from flask.testing import FlaskClient
from auth.session_auth import SessionAuth

@pytest.fixture
def app():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = 'your_secret_key'
    app.config['TESTING'] = True
    return app

@pytest.fixture
def client(app):
    return app.test_client()

@pytest.fixture
def session_auth():
    return SessionAuth()

def test_session_auth_success(client, session_auth):
    session_auth.create_session('user1')  # Create a session for testing
    response = client.post('/create-session', json={'username': 'user1'})
    session_cookie = response.cookies.get('session_id')

    response = client.get('/login', cookies={'session_id': session_cookie})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_session_auth_failure(client, session_auth):
    response = client.get('/login', cookies={'session_id': 'invalid_session_id'})
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"

def test_session_auth_no_cookie(client):
    response = client.get('/login')
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"
```

#### 3. **JWT Authentication Tests**

**`tests/test_jwt_auth.py`**

```python
import pytest
import jwt
from flask import Flask, request
from flask.testing import FlaskClient
from auth.jwt_auth import JWTAuth

@pytest.fixture
def app():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = 'your_secret_key'
    app.config['TESTING'] = True
    return app

@pytest.fixture
def client(app):
    return app.test_client()

@pytest.fixture
def jwt_auth():
    return JWTAuth()

def test_jwt_auth_success(client, jwt_auth):
    token = jwt_auth.generate_token('user1')
    response = client.get('/login', headers={'Authorization': f'Bearer {token}'})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_jwt_auth_failure(client, jwt_auth):
    invalid_token = 'invalid_token'
    response = client.get('/login', headers={'Authorization': f'Bearer {invalid_token}'})
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"

def test_jwt_auth_missing_token(client, jwt_auth):
    response = client.get('/login')
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"
```

#### 4. **API Key Authentication Tests**

**`tests/test_api_key_auth.py`**

```python
import pytest
from flask import Flask, request
from flask.testing import FlaskClient
from auth.api_key_auth import APIKeyAuth

@pytest.fixture
def app():
    app = Flask(__name__)
    app.config['TESTING'] = True
    return app

@pytest.fixture
def client(app):
    return app.test_client()

@pytest.fixture
def api_key_auth():
    return APIKeyAuth()

def test_api_key_auth_success(client, api_key_auth):
    response = client.get('/login', headers={'Authorization': 'apikey123'})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_api_key_auth_failure(client, api_key_auth):
    response = client.get('/login', headers={'Authorization': 'invalid_api_key'})
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"

def test_api_key_auth_missing_key(client, api_key_auth):
    response = client.get('/login')
    assert response.status_code == 401
    assert response.json['message'] == "Unauthorized"
```

#### 5. **Main Application Tests**

**`tests/test_main.py`**

```python
import pytest
from flask import Flask, jsonify, request
from flask.testing import FlaskClient
from auth.basic_auth import BasicAuth
from auth.session_auth import SessionAuth
from auth.jwt_auth import JWTAuth
from auth.api_key_auth import APIKeyAuth

@pytest.fixture
def app():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = 'your_secret_key'
    app.config['TESTING'] = True

    # Define routes
    @app.route('/login', methods=['GET'])
    def login():
        if auth.authenticate(request):
            return jsonify(message="Authenticated"), 200
        return jsonify(message="Unauthorized"), 401

    @app.route('/create-session', methods=['POST'])
    def create_session():
        if isinstance(auth, SessionAuth):
            session_id = auth.create_session(request.json.get('username'))
            resp = jsonify(message="Session created")
            resp.set_cookie('session_id', session_id)
            return resp
        return jsonify(message="Not supported"), 400

    return app

@pytest.fixture
def client(app):
    return app.test_client()

@pytest.fixture
def basic_auth():
    return BasicAuth()

@pytest.fixture
def session_auth():
    return SessionAuth()

@pytest.fixture
def jwt_auth():
    return JWTAuth()

@pytest.fixture
def api_key_auth():
    return APIKeyAuth()

def test_login_with_basic_auth(client, basic_auth):
    global auth
    auth = basic_auth
    auth_header = 'Basic ' + 'dXNlcjE6cGFzc3dvcmQx'  # Base64 encoding of 'user1:password1'
    response = client.get('/login', headers={'Authorization': auth_header})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_create_session(client, session_auth):
    global auth
    auth = session_auth
    response = client.post('/create-session', json={'username': 'user1'})
    session_cookie = response.cookies.get('session_id')

    response = client.get('/login', cookies={'session_id': session_cookie})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_login_with_jwt_auth(client, jwt_auth):
    global auth
    auth = jwt_auth
    token = jwt_auth.generate_token('user1')
    response = client.get('/login', headers={'Authorization': f'Bearer {token}'})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"

def test_login_with_api_key_auth(client, api_key_auth):
    global auth
    auth = api_key_auth
    response = client.get('/login', headers={'Authorization': 'apikey123'})
    assert response.status_code == 200
    assert response.json['message'] == "Authenticated"
```

### Running the Tests

To run the tests and ensure 100% statement coverage, use:

```bash
pytest --cov=auth --cov=main --cov-report term-missing
```

This command will run all the tests and show a coverage report, ensuring that every line of your code is tested.