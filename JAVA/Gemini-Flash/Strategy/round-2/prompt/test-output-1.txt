package com.example.authsystem.authentication;

import com.example.authsystem.models.User;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class BasicAuthenticationTest {

    private final BasicAuthentication basicAuthentication = new BasicAuthentication();

    @Test
    void authenticate_validCredentials() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn("Basic dXNlcm5hbWU6cGFzc3dvcmQ=");

        Map<String, User> users = new HashMap<>();
        users.put("username", new User("username", "password"));
        ResponseEntity<String> response = basicAuthentication.authenticate(request, users);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Authenticated", response.getBody());
    }

    @Test
    void authenticate_invalidCredentials() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn("Basic dXNlcm5hbWU6wrongpassword");

        Map<String, User> users = new HashMap<>();
        users.put("username", new User("username", "password"));
        ResponseEntity<String> response = basicAuthentication.authenticate(request, users);

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }

    @Test
    void authenticate_missingAuthorizationHeader() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn(null);

        ResponseEntity<String> response = basicAuthentication.authenticate(request, new HashMap<>());

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }
}

class SessionAuthenticationTest {

    private final SessionAuthentication sessionAuthentication = new SessionAuthentication();

    @Test
    void authenticate_validSession() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.COOKIE)).thenReturn("JSESSIONID=validSession");

        Map<String, String> sessions = new HashMap<>();
        sessions.put("validSession", "username");

        ResponseEntity<String> response = sessionAuthentication.authenticate(request, sessions);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Authenticated", response.getBody());
    }

    @Test
    void authenticate_invalidSession() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.COOKIE)).thenReturn("JSESSIONID=invalidSession");

        Map<String, String> sessions = new HashMap<>();
        sessions.put("validSession", "username");

        ResponseEntity<String> response = sessionAuthentication.authenticate(request, sessions);

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }

    @Test
    void authenticate_missingSessionCookie() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.COOKIE)).thenReturn(null);

        ResponseEntity<String> response = sessionAuthentication.authenticate(request, new HashMap<>());

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }
}

class JwtAuthenticationTest {

    private final JwtAuthentication jwtAuthentication = new JwtAuthentication();

    @Test
    void authenticate_validToken() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn("Bearer validToken");

        ResponseEntity<String> response = jwtAuthentication.authenticate(request, "secretKey");

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Authenticated", response.getBody());
    }

    @Test
    void authenticate_invalidToken() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn("Bearer invalidToken");

        ResponseEntity<String> response = jwtAuthentication.authenticate(request, "secretKey");

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }

    @Test
    void authenticate_missingAuthorizationHeader() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn(null);

        ResponseEntity<String> response = jwtAuthentication.authenticate(request, "secretKey");

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }
}

class ApiKeyAuthenticationTest {

    private final ApiKeyAuthentication apiKeyAuthentication = new ApiKeyAuthentication();

    @Test
    void authenticate_validApiKey() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn("validApiKey");

        Map<String, String> apiKeys = new HashMap<>();
        apiKeys.put("validApiKey", "username");

        ResponseEntity<String> response = apiKeyAuthentication.authenticate(request, apiKeys);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Authenticated", response.getBody());
    }

    @Test
    void authenticate_invalidApiKey() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn("invalidApiKey");

        Map<String, String> apiKeys = new HashMap<>();
        apiKeys.put("validApiKey", "username");

        ResponseEntity<String> response = apiKeyAuthentication.authenticate(request, apiKeys);

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }

    @Test
    void authenticate_missingApiKey() {
        HttpRequest request = mock(HttpRequest.class);
        HttpHeaders headers = mock(HttpHeaders.class);
        when(request.getHeaders()).thenReturn(headers);
        when(headers.getFirst(HttpHeaders.AUTHORIZATION)).thenReturn(null);

        ResponseEntity<String> response = apiKeyAuthentication.authenticate(request, new HashMap<>());

        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Authentication failed", response.getBody());
    }
}
content_copy
Use code with caution.
Java

Explanation:

Basic Authentication:

authenticate_validCredentials: Tests successful authentication with valid username and password in the Authorization header.

authenticate_invalidCredentials: Tests authentication failure with invalid password in the Authorization header.

authenticate_missingAuthorizationHeader: Tests authentication failure when the Authorization header is missing.

Session Authentication:

authenticate_validSession: Tests successful authentication with a valid session ID in the Cookie header.

authenticate_invalidSession: Tests authentication failure with an invalid session ID in the Cookie header.

authenticate_missingSessionCookie: Tests authentication failure when the Cookie header is missing.

JWT Authentication:

authenticate_validToken: Tests successful authentication with a valid JWT token in the Authorization header.

authenticate_invalidToken: Tests authentication failure with an invalid JWT token in the Authorization header.

authenticate_missingAuthorizationHeader: Tests authentication failure when the Authorization header is missing.

API Key Authentication:

authenticate_validApiKey: Tests successful authentication with a valid API key in the Authorization header.

authenticate_invalidApiKey: Tests authentication failure with an invalid API key in the Authorization header.

authenticate_missingApiKey: Tests authentication failure when the Authorization header is missing.

These tests provide 100% branch coverage for the authenticate method in each authentication strategy class, ensuring that all possible execution paths are tested.

Note: The JWT Authentication test assumes the existence of a method to validate JWT tokens. You will need to implement this method (e.g., using a library like JJWT) and adapt the tests accordingly.