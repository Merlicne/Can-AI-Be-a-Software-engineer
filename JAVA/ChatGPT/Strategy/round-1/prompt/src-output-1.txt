### Mini Project: Pluggable Authentication System Using the Strategy Design Pattern in Java

#### Objective:
To design and implement a pluggable authentication system in Java using the Strategy Design Pattern. The system will allow easy switching between different authentication strategies, including Basic Authentication, Session-Based Authentication, JWT Authentication, and API Key Authentication.

### Project Design and Structure

1. **Authenticator Interface**: This will define the common method `authenticate(Request request)` that all authentication strategies will implement.

2. **Concrete Strategies**: Each authentication strategy will implement the `Authenticator` interface:
   - **BasicAuthenticator**
   - **SessionAuthenticator**
   - **JWTAuthenticator**
   - **APIKeyAuthenticator**

3. **Context Class**: This will be responsible for holding the current strategy and delegating the authentication process to the strategy.

4. **Client Class**: This will be the main application logic where we can change the authentication strategy dynamically.

### Project Structure

```
src/
|-- com/example/authentication/
|   |-- Authenticator.java
|   |-- BasicAuthenticator.java
|   |-- SessionAuthenticator.java
|   |-- JWTAuthenticator.java
|   |-- APIKeyAuthenticator.java
|   |-- AuthContext.java
|-- com/example/
|   |-- Main.java
```

### Step-by-Step Implementation

#### 1. Authenticator Interface

```java
package com.example.authentication;

import javax.servlet.http.HttpServletRequest;

public interface Authenticator {
    boolean authenticate(HttpServletRequest request);
}
```

#### 2. BasicAuthenticator Strategy

```java
package com.example.authentication;

import javax.servlet.http.HttpServletRequest;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

public class BasicAuthenticator implements Authenticator {
    private static final Map<String, String> users = new HashMap<>();

    static {
        users.put("user1", "password1");
        users.put("user2", "password2");
    }

    @Override
    public boolean authenticate(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Basic ")) {
            String base64Credentials = authHeader.substring(6);
            String credentials = new String(Base64.getDecoder().decode(base64Credentials));
            String[] values = credentials.split(":", 2);
            String username = values[0];
            String password = values[1];

            return users.containsKey(username) && users.get(username).equals(password);
        }
        return false;
    }
}
```

#### 3. SessionAuthenticator Strategy

```java
package com.example.authentication;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class SessionAuthenticator implements Authenticator {
    private static final Map<String, String> sessions = new HashMap<>();

    public String createSession(String username) {
        String sessionId = UUID.randomUUID().toString();
        sessions.put(sessionId, username);
        return sessionId;
    }

    @Override
    public boolean authenticate(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if ("SESSIONID".equals(cookie.getName())) {
                    String sessionId = cookie.getValue();
                    return sessions.containsKey(sessionId);
                }
            }
        }
        return false;
    }
}
```

#### 4. JWTAuthenticator Strategy

```java
package com.example.authentication;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.Claims;

import javax.servlet.http.HttpServletRequest;
import java.util.Date;

public class JWTAuthenticator implements Authenticator {
    private static final String SECRET_KEY = "mySecretKey";

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 hours expiration
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    @Override
    public boolean authenticate(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            try {
                Claims claims = Jwts.parser()
                        .setSigningKey(SECRET_KEY)
                        .parseClaimsJws(token)
                        .getBody();
                return claims.getSubject() != null;
            } catch (Exception e) {
                return false;
            }
        }
        return false;
    }
}
```

#### 5. APIKeyAuthenticator Strategy

```java
package com.example.authentication;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

public class APIKeyAuthenticator implements Authenticator {
    private static final Map<String, String> apiKeys = new HashMap<>();

    static {
        apiKeys.put("user1", "key1");
        apiKeys.put("user2", "key2");
    }

    @Override
    public boolean authenticate(HttpServletRequest request) {
        String apiKey = request.getHeader("API-Key");
        return apiKeys.containsValue(apiKey);
    }
}
```

#### 6. AuthContext Class

```java
package com.example.authentication;

import javax.servlet.http.HttpServletRequest;

public class AuthContext {
    private Authenticator authenticator;

    public void setAuthenticator(Authenticator authenticator) {
        this.authenticator = authenticator;
    }

    public boolean authenticate(HttpServletRequest request) {
        if (authenticator == null) {
            throw new IllegalStateException("No authentication strategy set");
        }
        return authenticator.authenticate(request);
    }
}
```

#### 7. Main Class (Client)

```java
package com.example;

import com.example.authentication.*;

import javax.servlet.http.HttpServletRequest;

public class Main {

    public static void main(String[] args) {
        AuthContext authContext = new AuthContext();

        // Choose Basic Authentication Strategy
        authContext.setAuthenticator(new BasicAuthenticator());

        // Example HttpServletRequest object (Assumed)
        HttpServletRequest request = createSampleRequest();

        // Authenticate
        boolean isAuthenticated = authContext.authenticate(request);
        System.out.println("Authentication successful: " + isAuthenticated);

        // Switch to JWT Authentication
        authContext.setAuthenticator(new JWTAuthenticator());
        // Authenticate with JWT
        isAuthenticated = authContext.authenticate(request);
        System.out.println("JWT Authentication successful: " + isAuthenticated);
    }

    private static HttpServletRequest createSampleRequest() {
        // Mocked request object for demonstration
        return null; // Replace with actual HttpServletRequest in a real app
    }
}
```

### Unit Testing

You can use JUnit or any other Java testing framework to write unit tests for each strategy. For example:

```java
package com.example.authentication;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BasicAuthenticatorTest {

    @Test
    void authenticate_validCredentials() {
        BasicAuthenticator authenticator = new BasicAuthenticator();
        // Create a mock HttpServletRequest with valid credentials
        HttpServletRequest request = createMockRequest("user1", "password1");
        assertTrue(authenticator.authenticate(request));
    }

    @Test
    void authenticate_invalidCredentials() {
        BasicAuthenticator authenticator = new BasicAuthenticator();
        HttpServletRequest request = createMockRequest("user1", "wrongPassword");
        assertFalse(authenticator.authenticate(request));
    }

    // Add more tests for other strategies
}
```

### Conclusion

The Strategy Design Pattern effectively decouples the authentication logic, allowing the system to switch between different authentication mechanisms easily. The `AuthContext` class provides a flexible way to integrate any authentication strategy without altering the core application logic.

### Next Steps
1. Write full unit tests for each strategy.
2. Extend this implementation with more security features, such as rate limiting for API Key usage or token refresh mechanisms for JWT.

This architecture ensures that the system is pluggable, extendable, and easily testable.