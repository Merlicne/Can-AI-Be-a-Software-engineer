Develop a comprehensive junit test suite that ensures 100% statement coverage for the pluggable authentication system built using the Strategy Design Pattern. Each test case should cover different aspects of the authentication mechanisms (Basic, Session-Based, JWT, API Key), including valid and invalid inputs, edge cases, and failure scenarios.

Requirements for the Test Suite:
Setup and Initialization:

Set up the environment with mock user data, sessions, JWT tokens, and API keys for testing.
Initialize the system to support the selection of different authentication strategies.
Basic Authentication Strategy Tests:

Test with valid username and password.
Test with invalid username or password.
Test with missing Authorization header.
Test with malformed Authorization header (e.g., invalid Base64 encoding).
Session-Based Authentication Strategy Tests:

Test successful login, verifying session ID creation and storage.
Test subsequent requests with valid session ID.
Test subsequent requests with invalid or expired session ID.
Test behavior when the session cookie is missing.
Test logout functionality ensuring session invalidation.
JWT Authentication Strategy Tests:

Test successful login and JWT generation.
Test request with valid JWT in the Authorization header.
Test request with expired JWT.
Test request with invalid JWT (e.g., tampered signature).
Test request with missing JWT token in the header.
Test token refresh if implemented.
API Key Authentication Strategy Tests:

Test with valid API key in the Authorization header.
Test with invalid API key.
Test with missing API key.
Test with API key as a query parameter.
Test invalid scenarios, such as malformed API key input.
Edge Cases:

Test concurrent requests using the same session ID or JWT token.
Test multiple failed authentication attempts in a short period (e.g., brute-force protection).
Test with very large payloads in the Authorization header.
Test system behavior under high load, ensuring stability across multiple authentication mechanisms.
General Tests for Pluggable Strategy System:

Switch between different authentication strategies dynamically and verify correct behavior.
Ensure that once a strategy is selected, only that strategy's logic is used for authentication until switched.
Test system behavior when no strategy is selected (e.g., default behavior or appropriate error).
Test Execution and Validation:
Ensure that all test cases run successfully and that each line of code in all strategy implementations is executed at least once.
Use a code coverage tool (e.g., JaCoCo, Cobertura) to track statement coverage and ensure 100% coverage is achieved.
Include both unit tests for individual strategies and integration tests that validate the interaction between the strategies and the overall system.
