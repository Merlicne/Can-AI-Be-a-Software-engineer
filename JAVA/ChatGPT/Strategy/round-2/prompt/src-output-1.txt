### **Pluggable Authentication System in Java Using the Strategy Design Pattern**

In this project, we will create a pluggable authentication system where different authentication strategies (Basic Authentication, Session-Based Authentication, JWT Authentication, and API Key Authentication) can be easily interchanged. We'll use the Strategy Design Pattern to achieve this flexibility.

#### **Directory Structure**

The project will follow a typical Java project structure:

```
src
│
├── main
│   ├── java
│   │   └── com
│   │       └── authsystem
│   │           ├── strategies
│   │           │   ├── Authenticator.java        # Interface
│   │           │   ├── BasicAuthStrategy.java    # Basic Auth Implementation
│   │           │   ├── SessionAuthStrategy.java  # Session Auth Implementation
│   │           │   ├── JWTAuthStrategy.java      # JWT Auth Implementation
│   │           │   └── APIKeyAuthStrategy.java   # API Key Auth Implementation
│   │           ├── controllers
│   │           │   └── AuthController.java       # Handles Requests
│   │           ├── services
│   │           │   └── AuthService.java          # Core service handling authentication
│   │           └── models
│   │               └── User.java                 # User model for authentication
│   └── resources
│       └── application.properties                # Configuration file
└── test
    ├── java
    │   └── com
    │       └── authsystem
    │           └── strategies                    # Test cases for each strategy
    └── resources
```

#### **Dependencies**

To manage dependencies, we’ll use Maven. Here's the `pom.xml` file:

```xml
<dependencies>
    <!-- Spring Boot for simplicity -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- JWT Support -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.9.1</version>
    </dependency>

    <!-- JUnit for testing -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.7.0</version>
        <scope>test</scope>
    </dependency>

    <!-- Other dependencies like Lombok, etc. -->
</dependencies>
```

### **Code Implementation**

#### **1. Authenticator Interface**

```java
package com.authsystem.strategies;

import javax.servlet.http.HttpServletRequest;

public interface Authenticator {
    boolean authenticate(HttpServletRequest request);
}
```

#### **2. Basic Authentication Strategy**

```java
package com.authsystem.strategies;

import java.util.Base64;
import javax.servlet.http.HttpServletRequest;

public class BasicAuthStrategy implements Authenticator {
    @Override
    public boolean authenticate(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Basic ")) {
            String encodedCredentials = authHeader.substring(6);
            String decodedCredentials = new String(Base64.getDecoder().decode(encodedCredentials));
            String[] userDetails = decodedCredentials.split(":");

            String username = userDetails[0];
            String password = userDetails[1];

            // Compare with predefined users
            return "admin".equals(username) && "password".equals(password);
        }
        return false;
    }
}
```

#### **3. Session-Based Authentication Strategy**

```java
package com.authsystem.strategies;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

public class SessionAuthStrategy implements Authenticator {
    private static final String SESSION_ID = "SESSIONID";

    @Override
    public boolean authenticate(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (SESSION_ID.equals(cookie.getName()) && isValidSession(cookie.getValue())) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isValidSession(String sessionId) {
        // Validate session ID against stored sessions
        return "valid_session".equals(sessionId);
    }
}
```

#### **4. JWT Authentication Strategy**

```java
package com.authsystem.strategies;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import javax.servlet.http.HttpServletRequest;

public class JWTAuthStrategy implements Authenticator {
    private static final String SECRET_KEY = "secret";

    @Override
    public boolean authenticate(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            try {
                Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
                return true;
            } catch (Exception e) {
                return false;
            }
        }
        return false;
    }
}
```

#### **5. API Key Authentication Strategy**

```java
package com.authsystem.strategies;

import javax.servlet.http.HttpServletRequest;

public class APIKeyAuthStrategy implements Authenticator {
    @Override
    public boolean authenticate(HttpServletRequest request) {
        String apiKey = request.getHeader("Authorization");
        if (apiKey == null) {
            apiKey = request.getParameter("apiKey");
        }

        // Verify the API key
        return "valid_api_key".equals(apiKey);
    }
}
```

### **Switching Strategies**

The authentication strategy can be dynamically switched in the application by changing the implementation used in the `AuthService`.

```java
package com.authsystem.services;

import com.authsystem.strategies.Authenticator;
import javax.servlet.http.HttpServletRequest;

public class AuthService {
    private Authenticator authenticator;

    public AuthService(Authenticator authenticator) {
        this.authenticator = authenticator;
    }

    public void setAuthenticator(Authenticator authenticator) {
        this.authenticator = authenticator;
    }

    public boolean authenticate(HttpServletRequest request) {
        return authenticator.authenticate(request);
    }
}
```

### **Testing**

You should create unit tests for each strategy using JUnit.

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import com.authsystem.strategies.BasicAuthStrategy;
import javax.servlet.http.HttpServletRequest;

class BasicAuthStrategyTest {
    @Test
    void testAuthentication() {
        HttpServletRequest mockRequest = ...; // Mock the request
        BasicAuthStrategy authStrategy = new BasicAuthStrategy();
        assertTrue(authStrategy.authenticate(mockRequest));
    }
}
```

### **Conclusion**

This design allows you to easily add, remove, or update authentication strategies without modifying the core application logic. Each strategy adheres to the `Authenticator` interface, providing consistency and maintainability.

If you need more detailed documentation or additional components, let me know!