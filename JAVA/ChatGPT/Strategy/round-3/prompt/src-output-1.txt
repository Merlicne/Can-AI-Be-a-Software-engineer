Here is how you can structure and implement the pluggable authentication system in Java using the Strategy Design Pattern.

### Project Directory Structure

```plaintext
├── src
│   ├── main
│   │   ├── java
│   │   │   ├── com
│   │   │   │   ├── authsystem
│   │   │   │   │   ├── Authenticator.java
│   │   │   │   │   ├── BasicAuthentication.java
│   │   │   │   │   ├── SessionBasedAuthentication.java
│   │   │   │   │   ├── JwtAuthentication.java
│   │   │   │   │   ├── ApiKeyAuthentication.java
│   │   │   │   │   ├── AuthenticationContext.java
│   │   │   │   │   ├── MainApplication.java
│   │   ├── resources
│   │   │   ├── application.properties
├── test
│   ├── java
│   │   ├── com
│   │   │   ├── authsystem
│   │   │   │   ├── BasicAuthenticationTest.java
│   │   │   │   ├── SessionBasedAuthenticationTest.java
│   │   │   │   ├── JwtAuthenticationTest.java
│   │   │   │   ├── ApiKeyAuthenticationTest.java
└── pom.xml
```

### Dependencies

Add the following dependencies to your `pom.xml` file:

```xml
<dependencies>
    <!-- Spring Boot for handling web requests -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!-- JWT Support -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-api</artifactId>
        <version>0.11.2</version>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-impl</artifactId>
        <version>0.11.2</version>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-jackson</artifactId>
        <version>0.11.2</version>
    </dependency>
    
    <!-- Testing Dependencies -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
```

### Core Design

#### 1. Authenticator Interface

```java
package com.authsystem;

import javax.servlet.http.HttpServletRequest;

public interface Authenticator {
    boolean authenticate(HttpServletRequest request) throws AuthenticationException;
}
```

#### 2. BasicAuthentication Strategy

```java
package com.authsystem;

import java.util.Base64;
import javax.servlet.http.HttpServletRequest;

public class BasicAuthentication implements Authenticator {
    @Override
    public boolean authenticate(HttpServletRequest request) throws AuthenticationException {
        String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Basic ")) {
            throw new AuthenticationException("Missing or invalid Authorization header");
        }
        String base64Credentials = authHeader.substring(6);
        String credentials = new String(Base64.getDecoder().decode(base64Credentials));
        String[] values = credentials.split(":", 2);
        String username = values[0];
        String password = values[1];

        // Verify credentials against a predefined set of users
        if ("admin".equals(username) && "password".equals(password)) {
            return true;
        } else {
            throw new AuthenticationException("Invalid credentials");
        }
    }
}
```

#### 3. Session-Based Authentication Strategy

```java
package com.authsystem;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

public class SessionBasedAuthentication implements Authenticator {
    @Override
    public boolean authenticate(HttpServletRequest request) throws AuthenticationException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            throw new AuthenticationException("Session is invalid or expired");
        }
        return true;
    }
}
```

#### 4. JWT Authentication Strategy

```java
package com.authsystem;

import io.jsonwebtoken.*;
import javax.servlet.http.HttpServletRequest;
import java.util.Date;

public class JwtAuthentication implements Authenticator {
    private static final String SECRET_KEY = "secret";

    @Override
    public boolean authenticate(HttpServletRequest request) throws AuthenticationException {
        String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            throw new AuthenticationException("Missing or invalid Authorization header");
        }

        String token = authHeader.substring(7);

        try {
            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            throw new AuthenticationException("Invalid JWT token");
        }
    }

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 864_000_000)) // 10 days
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }
}
```

#### 5. API Key Authentication Strategy

```java
package com.authsystem;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

public class ApiKeyAuthentication implements Authenticator {
    private static final Map<String, String> apiKeys = new HashMap<>();

    static {
        apiKeys.put("123456", "user1");
        apiKeys.put("abcdef", "user2");
    }

    @Override
    public boolean authenticate(HttpServletRequest request) throws AuthenticationException {
        String apiKey = request.getHeader("Authorization");
        if (apiKey == null) {
            apiKey = request.getParameter("api_key");
        }

        if (apiKey == null || !apiKeys.containsKey(apiKey)) {
            throw new AuthenticationException("Invalid API key");
        }
        return true;
    }
}
```

#### 6. AuthenticationContext Class

```java
package com.authsystem;

import javax.servlet.http.HttpServletRequest;

public class AuthenticationContext {
    private Authenticator authenticator;

    public AuthenticationContext(Authenticator authenticator) {
        this.authenticator = authenticator;
    }

    public void setAuthenticator(Authenticator authenticator) {
        this.authenticator = authenticator;
    }

    public boolean authenticate(HttpServletRequest request) throws AuthenticationException {
        return authenticator.authenticate(request);
    }
}
```

### Unit Testing Example

```java
package com.authsystem;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import javax.servlet.http.HttpServletRequest;
import static org.mockito.Mockito.*;

class BasicAuthenticationTest {
    @Test
    void testValidBasicAuthentication() throws AuthenticationException {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        when(mockRequest.getHeader("Authorization")).thenReturn("Basic YWRtaW46cGFzc3dvcmQ=");

        Authenticator basicAuth = new BasicAuthentication();
        assertTrue(basicAuth.authenticate(mockRequest));
    }

    @Test
    void testInvalidBasicAuthentication() {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        when(mockRequest.getHeader("Authorization")).thenReturn("Basic InvalidBase64");

        Authenticator basicAuth = new BasicAuthentication();
        assertThrows(AuthenticationException.class, () -> basicAuth.authenticate(mockRequest));
    }
}
```

### Exception Handling

```java
package com.authsystem;

public class AuthenticationException extends Exception {
    public AuthenticationException(String message) {
        super(message);
    }
}
```

### Switching Strategies

In the main application or a controller, you can switch between strategies like this:

```java
package com.authsystem;

import javax.servlet.http.HttpServletRequest;

public class MainApplication {
    public static void main(String[] args) throws AuthenticationException {
        AuthenticationContext context = new AuthenticationContext(new BasicAuthentication());

        // Simulate switching to JWT Authentication
        context.setAuthenticator(new JwtAuthentication());

        // Simulate an incoming request (example)
        HttpServletRequest request = ...;  // Obtain from your environment
        boolean isAuthenticated = context.authenticate(request);

        System.out.println("Authenticated: " + isAuthenticated);
    }
}
```

This approach ensures that the authentication logic is decoupled from the main application logic, and new authentication strategies can easily be added. Each strategy is encapsulated in its own class, adhering to the Strategy Design Pattern.