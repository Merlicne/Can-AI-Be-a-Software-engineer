Pluggable Authentication System using Strategy Pattern in Java

This project implements a pluggable authentication system in Java using the Strategy Design Pattern, allowing for easy switching between Basic, Session-Based, JWT, and API Key Authentication mechanisms.

Directory Structure:
src/
├── main/
│   └── java/
│       └── com/
│           └── authentication/
│               ├── App.java                    // Main application class
│               ├── Authenticator.java          // Interface for authentication strategies
│               ├── BasicAuthenticator.java      // Basic Authentication strategy
│               ├── SessionAuthenticator.java    // Session-based Authentication strategy
│               ├── JWTAuthenticator.java        // JWT Authentication strategy
│               ├── APIKeyAuthenticator.java     // API Key Authentication strategy
│               ├── AuthContext.java             // Context for handling authentication strategies
│               └── User.java                     // User object
└── test/
    └── java/
        └── com/
            └── authentication/
                ├── AppTest.java                  // Test for main application
                ├── BasicAuthenticatorTest.java   // Test for Basic Authentication strategy
                ├── SessionAuthenticatorTest.java // Test for Session-based Authentication strategy
                ├── JWTAuthenticatorTest.java     // Test for JWT Authentication strategy
                └── APIKeyAuthenticatorTest.java  // Test for API Key Authentication strategy
content_copy
Use code with caution.
Dependencies:

JSON Web Token (JWT): io.jsonwebtoken:jjwt-api:0.11.5

JSON Web Token (JWT) Implementation: io.jsonwebtoken:jjwt-impl:0.11.5

JSON Web Token (JWT) Parser: io.jsonwebtoken:jjwt-jackson:0.11.5 (replace with your preferred JSON parser)

JUnit (for testing): junit:junit:4.13.2

Note: Adjust the versions based on your project requirements.

Code Implementation:

1. Authenticator Interface (Authenticator.java):

package com.authentication;

public interface Authenticator {
    boolean authenticate(Request request) throws AuthenticationException;
}
content_copy
Use code with caution.
Java

2. Basic Authentication Strategy (BasicAuthenticator.java):

package com.authentication;

import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

public class BasicAuthenticator implements Authenticator {

    private static final Map<String, String> users = new HashMap<>();

    static {
        // Populate with predefined users
        users.put("user1", "pass1");
        users.put("user2", "pass2");
    }

    @Override
    public boolean authenticate(Request request) throws AuthenticationException {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Basic ")) {
            String base64Credentials = authHeader.substring("Basic ".length()).trim();
            String credentials = new String(Base64.getDecoder().decode(base64Credentials));
            String[] parts = credentials.split(":", 2);

            if (parts.length == 2) {
                String username = parts[0];
                String password = parts[1];
                return users.containsKey(username) && users.get(username).equals(password);
            }
        }
        throw new AuthenticationException("Invalid Basic Authentication credentials.");
    }
}
content_copy
Use code with caution.
Java

3. Session-Based Authentication Strategy (SessionAuthenticator.java):

package com.authentication;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class SessionAuthenticator implements Authenticator {

    private static final Map<String, User> sessions = new HashMap<>();

    public String createSession(User user) {
        String sessionId = UUID.randomUUID().toString();
        sessions.put(sessionId, user);
        return sessionId;
    }

    @Override
    public boolean authenticate(Request request) throws AuthenticationException {
        String sessionId = request.getCookie("session-id");
        if (sessionId != null && sessions.containsKey(sessionId)) {
            return true;
        }
        throw new AuthenticationException("Invalid or missing session ID.");
    }
}
content_copy
Use code with caution.
Java

4. JWT Authentication Strategy (JWTAuthenticator.java):

package com.authentication;

import io.jsonwebtoken.*;

import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import java.util.Date;

public class JWTAuthenticator implements Authenticator {

    private static final String SECRET_KEY = "your_secret_key"; // Replace with a strong secret key
    private static final long TOKEN_VALIDITY = 3600000; // 1 hour

    public String generateToken(User user) {
        Key key = new SecretKeySpec(SECRET_KEY.getBytes(), SignatureAlgorithm.HS256.getJcaName());

        return Jwts.builder()
                .setSubject(user.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + TOKEN_VALIDITY))
                .signWith(key)
                .compact();
    }

    @Override
    public boolean authenticate(Request request) throws AuthenticationException {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring("Bearer ".length()).trim();

            try {
                Key key = new SecretKeySpec(SECRET_KEY.getBytes(), SignatureAlgorithm.HS256.getJcaName());
                Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
                return true;
            } catch (JwtException e) {
                throw new AuthenticationException("Invalid JWT token.");
            }
        }
        throw new AuthenticationException("Missing or invalid Authorization header.");
    }
}
content_copy
Use code with caution.
Java

5. API Key Authentication Strategy (APIKeyAuthenticator.java):

package com.authentication;

import java.util.HashMap;
import java.util.Map;

public class APIKeyAuthenticator implements Authenticator {

    private static final Map<String, User> apiKeys = new HashMap<>();

    static {
        // Populate with API keys and corresponding users
        apiKeys.put("api_key_1", new User("user1"));
        apiKeys.put("api_key_2", new User("user2"));
    }

    @Override
    public boolean authenticate(Request request) throws AuthenticationException {
        String apiKey = request.getHeader("Authorization");
        if (apiKey == null) {
            apiKey = request.getParameter("api_key");
        }
        if (apiKey != null && apiKeys.containsKey(apiKey)) {
            return true;
        }
        throw new AuthenticationException("Invalid or missing API key.");
    }
}
content_copy
Use code with caution.
Java

6. AuthContext Class (AuthContext.java):

package com.authentication;

public class AuthContext {
    private Authenticator authenticator;

    public AuthContext(Authenticator authenticator) {
        this.authenticator = authenticator;
    }

    public boolean authenticate(Request request) throws AuthenticationException {
        return authenticator.authenticate(request);
    }

    public void setAuthenticator(Authenticator authenticator) {
        this.authenticator = authenticator;
    }
}
content_copy
Use code with caution.
Java

7. Main Application Class (App.java):

package com.authentication;

public class App {
    public static void main(String[] args) {
        // Create an authentication context
        AuthContext authContext = new AuthContext(new BasicAuthenticator());

        // Example usage:
        Request request = new Request();
        request.addHeader("Authorization", "Basic dXNlcjE6cGFzczE="); // Example Basic Auth header

        try {
            if (authContext.authenticate(request)) {
                System.out.println("Authentication successful!");
            } else {
                System.out.println("Authentication failed.");
            }
        } catch (AuthenticationException e) {
            System.err.println("Authentication error: " + e.getMessage());
        }
    }
}
content_copy
Use code with caution.
Java

Notes:

Replace placeholder values (secret keys, API keys, etc.) with actual, secure values.

The provided code includes basic implementations for demonstration purposes. You should adapt and extend it to your specific application requirements, security standards, and data storage mechanisms.

This code uses in-memory storage for simplicity. In a production environment, consider using a database or other persistent storage for user credentials, API keys, and session data.

Implement thorough error handling and logging in your production code.

Write comprehensive unit tests for each authentication strategy and the overall system to ensure correctness and reliability.

This detailed implementation example, along with the provided directory structure and dependencies, provides a solid foundation for building a flexible and secure pluggable authentication system in Java using the Strategy Design Pattern.